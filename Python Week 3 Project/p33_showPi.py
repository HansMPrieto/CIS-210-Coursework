'''
Approximating pi.  CIS 210 F18 Project 3-3
Starter Code for showMontePi

Author: CIS 210

Credits: Based on code on p.78 Miller and Ranum text.

Approximate pi using a Monte Carlo simulation.
Then add graphics to visualize simulation.
'''

from turtle import *
import math
import random

def isInCircle(x, y, r):
    '''(int, int, int) -> Boolean
    
    Returns True if the input
    point (x, y) is inside the circle
    centered at point (0, 0) with radius
    r, and False otherwise.

    >>> isInCircle(0, 0, 1)
    True
    >>> isInCircle(.5, .5, 1)
    True
    >>> isInCircle(1, 2, 1)
    False
    '''

    d = math.sqrt(x**2 + y**2)
    return(d <= r)

def drawBoard():
    '''function -> Dartboard Graphic

    Draws the dartboard that is used to
    display the simulation of approximating
    pi.

    >>> drawBoard():
    Dartboard Graphic
    '''
    wn = Screen()
    wn.setworldcoordinates(-2, -2, 2, 2)

    speed(0); hideturtle()
    penup()

    goto(-1, 0)
    pendown()
    goto(1, 0)
    penup()
    goto(0, 1)
    pendown()
    goto(0, -1)
    penup()
    goto(0, -1)

    return None

def reportPi(numDarts, approxPi):
    ''' (int, int) -> None

    Generates an approximate value of pi for
    approxPi, a positive integer.

    This result is compared to the pi value
    generated by the Python math library pi
    function.

    None value is returned. 

    >>> reportPi(10, 3)
    With  10 iterations:
    my approximate value for pi is:  3
    math lib pi value is:  3.141592653589793
    This is a  4.51 percent error.

    >>> reportPi(20, 3.11)
    With  20 iterations:
    my approximate value for pi is:  3.11
    math lib pi value is:  3.141592653589793
    This is a  1.01 percent error.

    reportPi(30, 3.22)
    With  30 iterations:
    my approximate value for pi is:  3.22
    math lib pi value is:  3.141592653589793
    This is a  2.5 percent error.
    '''
    piValue1 = approxPi
    piValue2 = math.pi

    diff = abs(piValue2 - piValue1)
    err = (diff / piValue2) * 100

    err = round(err, 2)

    print('With', numDarts, 'iterations:')
    print('my approximate value for pi is:', piValue1)
    print('math lib pi value is:', math.pi)
    print('This is a', err, 'percent error.')

    return None

def showMontePi(numDarts):
    ''' int -> float

    Calls function drawBoard to draw the
    dartboard used to generate the simulation
    of approximating pi.

    Throws numDarts on the board and checks
    whther they landed on the dartboard.

    Calls function reportPi to compute the
    difference between the approximate value for
    pi generated by the simulation, and the pi
    value from the pi library.

    Returns the approximate value for pi.

    >>> showMontePi(10):
    With  10 iterations:
    my approximate value for pi is:  3.2
    math lib pi value is:  3.141592653589793
    This is a  1.86 percent error.

    >>> showMontePi(20):
    With  20 iterations:
    my approximate value for pi is:  3.6
    math lib pi value is:  3.141592653589793
    This is a  14.59 percent error.

    >>> showMontePi(30):
    With  30 iterations:
    my approximate value for pi is:  3.3333333333333335
    math lib pi value is:  3.141592653589793
    This is a  6.1 percent error.
    '''

    drawBoard()

    # pen should stay up for drawing darts
 
    inCircleCt = 0

    # throw the darts and check whether
    # they landed on the dart board and
    # keep count of those that do   
    for i in range(numDarts):
        x = random.random()
        y = random.random()
        r = 1

    # Revise code to call new isInCircle function.
    # See Project 3-2 and 3-3 specifications.

        isInCircle(x, y, r)

        # show the dart on the board
        if isInCircle(x, y, r):
            inCircleCt += 1
            color('blue')
        else:
            color('red')

        goto(x, y)
        dot()

    # calculate approximate pi
    approxPi = inCircleCt/numDarts * 4

    reportPi(numDarts, approxPi)

    #wn.exitonclick()

    return approxPi


def main():
    '''Show Monte Pi Program Driver'''
    showMontePi(10)
    showMontePi(20)
    showMontePi(30)

main()
    
